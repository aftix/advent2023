name: main

on:
  push:
  pull_request:
    types: [opened, closed]
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  checks: write

jobs:
  build:
    name: cargo build
    strategy:
      matrix:
        include:
          - profile: dev
            target: debug
          - profile: release
            target: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.profile }}

      - name: Build
        uses: clechasseur/rs-cargo@v1
        with:
          command: build
          args: --profile ${{ matrix.profile }} --target x86_64-unknown-linux-gnu

      - name: Collect binaries
        run: |
          mkdir -p binaries
          find "target/x86_64-unknown-linux-gnu/${{ matrix.target }}" -maxdepth 1 -executable -type f -exec cp \{\} binaries \;

      - name: Store binaries
        uses: actions/upload-artifact@v3
        with:
          name: advent2023-${{ matrix.profile }}
          path: binaries/

  clippy:
    name: cargo clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - name: Run Clippy
        uses: auguwu/clippy-action@1.2.2
        with:
          all-features: true
          deny: warnings
          token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: cargo nextest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Install cargo-nextest
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-nextest

      - name: Run tests
        uses: clechasseur/rs-cargo@v1
        with:
          command: nextest
          args: run

  bench:
    name: cargo bench
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Make benchmark input directory
        run: mkdir bench_inputs

      - name: Get benchmark inputs
        run: >
          perl -n -e'/name = "day([0-9]+)(?!p)/ && print $1,"\n"' < Cargo.toml |
          xargs -I% curl -X GET -H "Cookie: session=$SESSION" "$SITE/%/input" -o "bench_inputs/day%.dat"
        env:
          SITE: "https://adventofcode.com/2023/day"
          SESSION: ${{ secrets.SITE_SESSION_TOKEN }}

      - name: Figure out checkout commit for baseline benchmarks
        id: baseline
        run: |
          if [ "${{ github.event_name == 'pull_request' }}" = "true" ]; then
            echo "ref=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
          else
            ref="$(git log --oneline --no-walk --pretty='%H' 'HEAD~')"
            echo "ref=$ref" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout commit for baseline benchmarks
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.baseline.outputs.ref }}
          clean: false

      - name: Run baseline benchmarks
        uses: clechasseur/rs-cargo@v1
        with:
          command: bench

      - name: Checkout current commit
        uses: actions/checkout@v3
        with:
          clean: false

      - name: Run benchmarks
        uses: clechasseur/rs-cargo@v1
        with:
          command: bench

      - name: Upload benchmark reports
        uses: actions/upload-artifact@v3
        with:
          name: benchmarks
          path: target/criterion

  upload-reports:
    name: Upload criterion.rs reports to website
    runs-on: ubuntu-latest
    needs: [test, bench, clippy]
    concurrency:
      group: upload-reports
      cancel-in-progress: true
    steps:
      - name: Get ssh key from secrets
        run: install -m 600 -D /dev/stdin "$HOME/.ssh/id_ed25519" <<< "${{ secrets.SSH_PRIVATE_KEY }}"

      - name: Add known hosts to .ssh directory
        run: |
          ssh-keyscan -H "${{ secrets.SERVER }}" > "$HOME/.ssh/known_hosts"

      - name: Get benchmark reports
        uses: actions/download-artifact@v3
        with:
          name: benchmarks
          path: advent2023

      - name: Archive benchmark reports
        run: >
          tar cvf benchmarks.tar.gz advent2023/

      - name: Deploy benchmark reports
        run: |
          # Copy benchmark reports to server (www-data home)
          scp benchmarks.tar.gz "www-data@${{ secrets.SERVER }}:~/benchmarks.tar.gz"
          # Untar benchmark reports on server
          # This will create/update a directory advent2023/, which should be served statically
          # Afterwords, symlink index.html for report/ to the top level dir
          ssh "www-data@${{ secrets.SERVER }}" 'sh -ls' <<< "$SCRIPT"
        env:
          SCRIPT: >-
            cd $HOME ;
            tar xvf benchmarks.tar.gz ;
            cd advent2023 ;
            sed 's$<a href="\.\./$<a href="./$' report/index.html > index.html ;
            rm ../benchmarks.tar.gz
